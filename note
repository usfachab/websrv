what is a connectionless and connection-oriented sockets: 
	- Connectionless: Its typically used with connectionless sockets (like UDP) to receive data
  - connection-oriented: Its typically used with connection-oriented sockets (like TCP) to receive data

The three-way TCP hanshake:
	CLIENT                                  SERVER
	|                                          |
	|   1. SYN (Seq=X)                         |
	|----------------------------------------> |
	|                                          |
	|   2. SYN-ACK (Seq=Y, Ack=X+1)            |
	| <----------------------------------------|
	|                                          |
	|   3. ACK (Ack=Y+1)                       |
	|----------------------------------------> |
	|                                          |
	|   4. Data Packet (Seq=X+1, ...)          |
	|----------------------------------------> |
	|                                          |
	|   5. Acknowledgment (Ack=X+2, ...)       |
	| <----------------------------------------|
	|                                          |

Diagrame of connection-oriented client-server:

	Server Side                              Client Side
	----------------                      ----------------
	socket()                                 socket()
	  |                                        |
	bind()                                     |
	  |                                 gethostbyname()
	listen()                                   |
	  |                                        |
	accept() 							       |
	  |	<------- Block until connection	       |
	  |                                        | 
	  | <--------------------------------  connect()
	select()                                   |
	  |                                        |
	recv() <------- Data (request) -------- send()
	  |                                        |
	Process request                            |
	  |                                        |
	send() ---------- Data (reply) --------- recv()
	  |                                        |
	close()                                  close()
											 

setsockopt() can useful for non-blocking mode where I/O calls do not block execution:
	- Address Reuse (SO_REUSEADDR):
		Allows a socket to forcibly bind to a port in use by another socket.
		This is useful for allowing immediate reuse of the port after a socket has been closed.

    - Keep-Alive Packets (SO_KEEPALIVE):
		Enables sending keep-alive packets for a socket connection.
		This is used to maintain idle TCP connections and
		to check if the other side has unexpectedly gone down.

    - Send or Receive Timeout (SO_RCVTIMEO and SO_SNDTIMEO):
        Sets the timeout value that specifies the maximum amount of
		time a call to recv() or send() should block when waiting for data.

    - Broadcast (SO_BROADCAST):
        Enables permission to send broadcast messages (used in UDP socket programming).

    - Receive Buffer Size (SO_RCVBUF):
        Sets the size of the TCP buffer for incoming data.

    - Send Buffer Size (SO_SNDBUF):
        Sets the size of the TCP buffer for outgoing data.

    - Socket Linger (SO_LINGER):
        Sets the linger options for a socket, determining how a close() or
		shutdown() call will behave with respect to unsent data.

    - Nagle's Algorithm (TCP_NODELAY):
        Disables Nagle's algorithm when set. It is useful for applications that expect
		low latency in sending small packets of data without waiting for an acknowledgment.

    - Socket Non-Blocking (O_NONBLOCK):
        Sets the socket to non-blocking mode, where I/O calls do not block execution.
